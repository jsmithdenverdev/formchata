AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: An AWS Serverless Application.
Globals:
  Function:
    Environment:
      Variables:
        TABLE_NAME: form
Parameters:
  FormchataUserPoolArn:
    Type: String
    Description: "Arn for the Formchata Cognito User Pool"
Resources:
  FormApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors: "'*'"
      Auth:
        DefaultAuthorizer: FormchataCognitoAuthorizer
        Authorizers:
          FormchataCognitoAuthorizer:
            UserPoolArn: !Ref FormchataUserPoolArn
  CreateFormFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: create-form
      Handler: Form.Functions::Form.Functions.CreateForm::Handle
      Runtime: dotnet6
      CodeUri: ""
      MemorySize: 256
      Timeout: 30
      Role:
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: "2012-10-17"
          Statement:
            Effect: Allow
            Action:
              - dynamodb:DescribeTable
              - dynamodb:PutItem
              - dynamodb:UpdateItem
            Resource:
              - arn:aws:dynamodb:*:*:table/form
            # Condition:
            #   ForAllValues:StringEquals:
            #     dynamodb:LeadingKeys:
            #       - "${cognito-identity.amazonaws.com:sub}"
      Events:
        Create:
          Type: Api
          Properties:
            Path: /
            Method: POST
            RestApiId: !Ref FormApi
  ReadFormFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: get-form
      Handler: Form.Functions::Form.Functions.ReadForm::Handle
      Runtime: dotnet6
      CodeUri: ""
      MemorySize: 256
      Timeout: 30
      Role:
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:DescribeTable
              Resource:
                - arn:aws:dynamodb:*:*:table/form
            - Effect: Allow
              Action:
                - dynamodb:Query
              Resource:
                - arn:aws:dynamodb:*:*:table/form/index/FormIdIndex
      Events:
        Read:
          Type: Api
          Properties:
            Path: /{id}
            Method: GET
            RestApiId: !Ref FormApi
  UpdateFormFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: update-form
      Handler: Form.Functions::Form.Functions.UpdateForm::Handle
      Runtime: dotnet6
      CodeUri: ""
      MemorySize: 256
      Timeout: 30
      Role:
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:DescribeTable
                - dynamodb:PutItem
                - dynamodb:UpdateItem
              Resource:
                - arn:aws:dynamodb:*:*:table/form
              # Condition:
              #   ForAllValues:StringEquals:
              #     dynamodb:LeadingKeys:
              #       - "${cognito-identity.amazonaws.com:sub}"
      Events:
        Update:
          Type: Api
          Properties:
            Path: /{id}
            Method: PUT
            RestApiId: !Ref FormApi
  DeleteFormFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: delete-form
      Handler: Form.Functions::Form.Functions.DeleteForm::Handle
      Runtime: dotnet6
      CodeUri: ""
      MemorySize: 256
      Timeout: 30
      Role:
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:DescribeTable
                - dynamodb:DeleteItem
              Resource:
                - arn:aws:dynamodb:*:*:table/form
              # Condition:
              #   ForAllValues:StringEquals:
              #     dynamodb:LeadingKeys:
              #       - "${cognito-identity.amazonaws.com:sub}"
      Events:
        Delete:
          Type: Api
          Properties:
            Path: /{id}
            Method: DELETE
            RestApiId: !Ref FormApi
  FormTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: form
      AttributeDefinitions:
        - AttributeName: ownerId
          AttributeType: S
        - AttributeName: formId
          AttributeType: S
      KeySchema:
        - AttributeName: ownerId
          KeyType: HASH
        - AttributeName: formId
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      GlobalSecondaryIndexes:
        - IndexName: "FormIdIndex"
          KeySchema:
            - AttributeName: formId
              KeyType: HASH
          Projection:
            # TODO: It may not be worth projecting all attributes into the secondary index. Form metadata can become
            # quite large. Perhaps it makes more sense to have a separate mapping table?
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
Outputs:
  FormApiURL:
    Description: API endpoint URL for Prod environment
    Value: !Sub https://${FormApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/
